# =============================================================================
# Multi-stage Dockerfile for Patexia Legal AI Chatbot Frontend
# 
# This Dockerfile builds a Gradio-based frontend container with:
# - Python-based Gradio web interface
# - Development and production variants
# - Security hardening and optimization
# - Legal UI components and styling
# - Real-time WebSocket support
# =============================================================================

# =============================================================================
# STAGE 1: Base Python Environment for Frontend
# =============================================================================
FROM python:3.13-slim-bookworm as base

# Set build arguments
ARG PYTHON_VERSION=3.13
ARG TARGETPLATFORM=linux/amd64
ARG GRADIO_VERSION=4.15.0

# Environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Environment variables for Gradio
ENV GRADIO_SERVER_NAME=0.0.0.0 \
    GRADIO_SERVER_PORT=7860 \
    GRADIO_ANALYTICS_ENABLED=false \
    GRADIO_ALLOW_FLAGGING=never

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Basic utilities
    curl \
    wget \
    ca-certificates \
    \
    # Build tools (needed for some Python packages)
    build-essential \
    gcc \
    g++ \
    \
    # Network utilities
    netcat-openbsd \
    iputils-ping \
    \
    # File processing
    file \
    libmagic1 \
    \
    # Image processing (for UI assets)
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    \
    # Font support for UI
    fontconfig \
    fonts-dejavu-core \
    fonts-liberation \
    \
    # JavaScript runtime (for advanced UI features)
    nodejs \
    npm \
    \
    # System monitoring
    procps \
    htop \
    \
    # Security tools
    gnupg2 \
    \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Upgrade pip and install core Python packages
RUN python -m pip install --upgrade pip setuptools wheel

# Create application user for security
RUN groupadd -r gradio && \
    useradd -r -g gradio -d /app -s /bin/bash -c "Gradio Frontend User" gradio

# Create application directories
RUN mkdir -p /app/{frontend,static,templates,assets,logs,cache,temp} && \
    chown -R gradio:gradio /app

# =============================================================================
# STAGE 2: Frontend Dependencies
# =============================================================================
FROM base as frontend-dependencies

# Set working directory
WORKDIR /app

# Copy requirements files
COPY requirements-frontend.txt ./

# Install Python frontend dependencies
RUN pip install --no-cache-dir \
    # Core Gradio and web framework
    gradio==${GRADIO_VERSION} \
    fastapi==0.108.0 \
    uvicorn[standard]==0.25.0 \
    \
    # HTTP clients for backend communication
    httpx==0.26.0 \
    aiohttp==3.9.1 \
    requests==2.31.0 \
    \
    # WebSocket support
    websockets==12.0 \
    python-socketio==5.11.0 \
    websocket-client==1.7.0 \
    \
    # Data handling and validation
    pydantic==2.5.2 \
    pandas==2.1.4 \
    numpy==1.26.2 \
    \
    # Date and time handling
    python-dateutil==2.8.2 \
    pytz==2023.3 \
    \
    # File handling
    python-multipart==0.0.6 \
    python-magic==0.4.27 \
    \
    # Configuration management
    python-dotenv==1.0.0 \
    \
    # Logging and monitoring
    structlog==23.2.0 \
    rich==13.7.0 \
    \
    # Security
    cryptography==41.0.8 \
    \
    # UI components and styling
    plotly==5.17.0 \
    matplotlib==3.8.2 \
    seaborn==0.13.0 \
    \
    # Utilities
    click==8.1.7 \
    jinja2==3.1.2

# Install Node.js dependencies for advanced UI features
RUN npm install -g \
    # CSS processing
    postcss-cli \
    autoprefixer \
    \
    # JavaScript utilities
    terser \
    \
    # Development tools
    live-server

# =============================================================================
# STAGE 3: Development Dependencies
# =============================================================================
FROM frontend-dependencies as dev-dependencies

# Install development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development tools
    vim \
    nano \
    less \
    tree \
    git \
    \
    # Debugging tools
    strace \
    lsof \
    \
    # Development utilities
    tmux \
    screen \
    \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install development Python packages
RUN pip install --no-cache-dir \
    # Code quality
    black==23.12.1 \
    isort==5.13.2 \
    flake8==7.0.0 \
    \
    # Testing
    pytest==7.4.4 \
    pytest-asyncio==0.23.2 \
    pytest-mock==3.12.0 \
    playwright==1.40.0 \
    \
    # Development utilities
    ipython==8.18.1 \
    jupyter==1.0.0 \
    \
    # Hot reload and file watching
    watchdog==3.0.0

# Install Playwright browsers for UI testing
RUN playwright install chromium firefox webkit

# =============================================================================
# STAGE 4: Static Assets and UI Components
# =============================================================================
FROM frontend-dependencies as assets-builder

# Create assets directory
WORKDIR /app/assets

# Copy and process static assets
COPY frontend/assets/ ./
COPY frontend/styles/ ../styles/
COPY frontend/components/ ../components/

# Create optimized static assets
RUN mkdir -p /app/static/{css,js,images,fonts} && \
    # Copy and optimize images
    cp -r images/* /app/static/images/ 2>/dev/null || true && \
    # Copy fonts
    cp -r fonts/* /app/static/fonts/ 2>/dev/null || true

# Process CSS files
COPY frontend/styles/main.css /app/static/css/
COPY frontend/styles/legal-theme.css /app/static/css/
COPY frontend/styles/components.css /app/static/css/

# Create combined and minified CSS
RUN cat /app/static/css/*.css > /app/static/css/combined.css

# Process JavaScript files
COPY frontend/js/ /app/static/js/

# =============================================================================
# STAGE 5: Development Build
# =============================================================================
FROM dev-dependencies as development

# Set development environment variables
ENV ENVIRONMENT=development \
    DEBUG=true \
    LOG_LEVEL=DEBUG \
    GRADIO_DEBUG=true \
    GRADIO_SHOW_ERROR=true \
    GRADIO_ENABLE_QUEUE=true \
    GRADIO_SHOW_TIPS=true \
    ENABLE_HOT_RELOAD=true

# Copy application code
COPY --chown=gradio:gradio frontend/ /app/frontend/
COPY --chown=gradio:gradio config/ /app/config/

# Copy static assets from builder stage
COPY --from=assets-builder --chown=gradio:gradio /app/static/ /app/static/

# Create development directories
RUN mkdir -p /app/{logs/dev,cache/dev,temp/dev} && \
    chown -R gradio:gradio /app

# Switch to application user
USER gradio

# Set Python path
ENV PYTHONPATH=/app:/app/frontend

# Expose development ports
EXPOSE 7860 7861 8083

# Development health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:7860/ || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Development entrypoint with hot reload
ENTRYPOINT ["python"]
CMD ["-m", "frontend.main", "--debug", "--reload", "--host", "0.0.0.0", "--port", "7860"]

# =============================================================================
# STAGE 6: Production Build
# =============================================================================
FROM frontend-dependencies as production

# Set production environment variables
ENV ENVIRONMENT=production \
    DEBUG=false \
    LOG_LEVEL=INFO \
    GRADIO_DEBUG=false \
    GRADIO_SHOW_ERROR=false \
    GRADIO_ENABLE_QUEUE=true \
    GRADIO_SHOW_TIPS=false \
    GRADIO_ANALYTICS_ENABLED=false \
    ENABLE_HOT_RELOAD=false

# Copy application code
COPY --chown=gradio:gradio frontend/ /app/frontend/
COPY --chown=gradio:gradio config/ /app/config/

# Copy optimized static assets from builder stage
COPY --from=assets-builder --chown=gradio:gradio /app/static/ /app/static/

# Copy production configuration
COPY --chown=gradio:gradio config/gradio/production.json /app/config/gradio.json

# Create production directories
RUN mkdir -p /app/{logs,cache,temp} && \
    chown -R gradio:gradio /app

# Remove development files and clean up
RUN find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Switch to application user
USER gradio

# Set Python path
ENV PYTHONPATH=/app:/app/frontend

# Create production health check script
RUN echo '#!/bin/bash\ncurl -f http://localhost:7860/ || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Expose production port
EXPOSE 7860

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Production entrypoint
ENTRYPOINT ["python"]
CMD ["-m", "frontend.main", "--host", "0.0.0.0", "--port", "7860"]

# =============================================================================
# STAGE 7: Testing Build
# =============================================================================
FROM dev-dependencies as testing

# Set testing environment variables
ENV ENVIRONMENT=testing \
    DEBUG=true \
    LOG_LEVEL=DEBUG \
    TESTING=true \
    GRADIO_DEBUG=true

# Copy application and test code
COPY --chown=gradio:gradio frontend/ /app/frontend/
COPY --chown=gradio:gradio tests/frontend/ /app/tests/
COPY --chown=gradio:gradio config/ /app/config/

# Copy static assets for testing
COPY --from=assets-builder --chown=gradio:gradio /app/static/ /app/static/

# Create testing directories
RUN mkdir -p /app/{test_logs,test_cache,test_screenshots} && \
    chown -R gradio:gradio /app

# Switch to application user
USER gradio

# Set Python path
ENV PYTHONPATH=/app:/app/frontend

# Testing command
CMD ["python", "-m", "pytest", "tests/", "-v", "--capture=no"]

# =============================================================================
# STAGE 8: Nginx Static Server (Alternative Frontend)
# =============================================================================
FROM nginx:alpine as nginx-static

# Copy static assets
COPY --from=assets-builder /app/static/ /usr/share/nginx/html/static/

# Copy custom nginx configuration
COPY config/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Create nginx directories
RUN mkdir -p /var/log/nginx /var/cache/nginx

# Expose nginx port
EXPOSE 80

# Health check for nginx
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# =============================================================================
# STAGE 9: Final Stage Selection
# =============================================================================
FROM ${BUILD_TARGET:-production} as final

# Add labels for container metadata
LABEL org.opencontainers.image.title="Patexia Legal AI Chatbot Frontend" \
      org.opencontainers.image.description="Gradio-based frontend for legal document processing and AI search" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="Patexia" \
      org.opencontainers.image.authors="Development Team" \
      org.opencontainers.image.source="https://github.com/patexia/legal-ai-chatbot" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Final validation and setup
RUN python --version && \
    pip --version && \
    python -c "import gradio; print(f'Gradio version: {gradio.__version__}')" && \
    python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')"

# Set final working directory
WORKDIR /app

# Documentation for the container
RUN echo "Patexia Legal AI Chatbot Frontend Container" > /app/CONTAINER_INFO.txt && \
    echo "Built on: $(date)" >> /app/CONTAINER_INFO.txt && \
    echo "Python version: $(python --version)" >> /app/CONTAINER_INFO.txt && \
    echo "Gradio version: $(python -c 'import gradio; print(gradio.__version__)')" >> /app/CONTAINER_INFO.txt && \
    echo "Environment: ${ENVIRONMENT}" >> /app/CONTAINER_INFO.txt && \
    echo "Port: ${GRADIO_SERVER_PORT}" >> /app/CONTAINER_INFO.txt

# Create startup script
RUN echo '#!/bin/bash\n\
echo "Starting Patexia Legal AI Frontend..."\n\
echo "Environment: ${ENVIRONMENT}"\n\
echo "Debug: ${DEBUG}"\n\
echo "Port: ${GRADIO_SERVER_PORT}"\n\
echo "Server: ${GRADIO_SERVER_NAME}:${GRADIO_SERVER_PORT}"\n\
exec "$@"' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Use custom entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]